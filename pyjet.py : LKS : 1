#!/usr/bin/python
import meshlib as ml
from math import *
import plotlib as pl
import numpy as np
import sorlib as sl
import turblib as tl

#Number of zones in x/y
nzx = 64
nzy = 64

# Reynolds Number and centerline velocity
Re = 100.
u0_cl=1.0 #centerline velocity
u_cf = 0.1 #coflow velocity

#Timing controls
t_final = 100. #Stop Time
cfl = 0.24 #time step multiplier
dtc = 10 #Reporting Frequency

#Linear Solver Controls
tol=1e-3 #L2 tolerance
omega=1.4 #Over-relaxation (GS only)
max_iter=2000 #Max Iterations

# Turbulence Model Choices
k_epsilon = False
TI=0.1
L0=0.7



# Initialize the mesh and inflow
mesh=ml.Mesh2D(nzx,nzy,0.0,4.0,-2.0,2.0)

u0 = ml.pvarg2d(mesh)
v0 = ml.pvarg2d(mesh)

nu = ml.pvarg2d(mesh)
nu.f = 1./Re


# Set the initial conditions
inflow=np.zeros(mesh.npy+2)
inflowv = np.zeros(mesh.npy+2)
for i in np.arange(mesh.npy):
    if np.abs(mesh.py[i]) < 0.5:
        inflow[i]=u0_cl*(np.abs(mesh.py[i])-0.5)**2/0.5**2
        u0.f[:,i]=u0_cl*(np.abs(mesh.py[i])-0.5)**2/0.5**2

#Apply co-flow
inflow=np.maximum(inflow,u_cf)
u0.f=np.maximum(u0.f,u_cf)

#Apply BCs
u0.setbc(mesh,'top','extrap')
u0.setbc(mesh,'bottom','extrap')
#u0.setbc(mesh,'bottom','reflect')
u0.setbc(mesh,'right','extrap')
u0.setbc(mesh,'left','dirichlet',inflow)

v0.setbc(mesh,'top','extrap')
v0.setbc(mesh,'bottom','extrap')
#v0.setbc(mesh,'bottom','dirichlet',0.0)
v0.setbc(mesh,'right','extrap')
v0.setbc(mesh,'left','dirichlet',inflowv)

time = 0.0
cyc = 0


# Create extra data structures
u1=ml.pvarg2d(mesh)
v1=ml.pvarg2d(mesh)

f=ml.zvar2d(mesh)
p=ml.zvarg2d(mesh)
um1=ml.pvar2d(mesh)
vm1=ml.pvar2d(mesh)

if k_epsilon :
    k=ml.pvarg2d(mesh)
    k.f=u0.f**2*TI
    inflowk=np.zeros(mesh.npy+2)
    inflowk=inflow**2*TI
    #Apply BCs
    k.setbc(mesh,'top','extrap')
    k.setbc(mesh,'bottom','extrap')
    k.setbc(mesh,'right','extrap')
    k.setbc(mesh,'left','dirichlet',inflowk)

    eps=ml.pvarg2d(mesh)
    eps.f=k.f**1.5/L0
    infloweps=np.zeros(mesh.npy+2)
    infloweps=inflowk**1.5/L0
    eps.setbc(mesh,'top','extrap')
    eps.setbc(mesh,'bottom','extrap')
    eps.setbc(mesh,'right','extrap')
    eps.setbc(mesh,'left','dirichlet',infloweps)
    
    k.f=np.maximum(k.f,tl.k_min)
    eps.f=np.maximum(eps.f,tl.eps_min)


# Main driver
while time<t_final:

    #Compute the time step
    if k_epsilon:
        nu.f=tl.c_mu*k.f**2/eps.f+1.0/Re
        
    umax=(np.abs(u0.f)).max()
    numax=(np.abs(nu.f)).max()
    dt = min(cfl*mesh.dx/umax,cfl*mesh.dx**2/numax,cfl*mesh.dy**2/numax,t_final-time)
    tnxt = time+dt


    #Compute needed gradients
    u0.calcgrads(mesh)
    v0.calcgrads(mesh)

    if k_epsilon:
        #advance the k-epsilon equations
        k.calcgrads(mesh)
        eps.calcgrads(mesh)
        nu.calcgrads(mesh)
        [k,eps]=tl.upd_keps(mesh,k,eps,u0,v0,nu,dt)
        

    #Advance the velocity
    u1.f = u0.f+dt*((u0.fd2x+u0.fd2y)*nu.f-u0.f*u0.fdx-v0.f*u0.fdy)
    v1.f = v0.f+dt*((v0.fd2x+v0.fd2y)*nu.f-u0.f*v0.fdx-v0.f*v0.fdy)

    if k_epsilon:
        #add in grad-k contributions
        u1.f=u1.f-dt*k.fdx*2./3.
        v1.f=v1.f-dt*k.fdy*2./3.
        #now the grad-nu contributions
        u1.f=u1.f+dt*( 2.0*u0.fdx*nu.fdx
                       +u0.fdy*nu.fdy
                       +nu.fdy*v0.fdx)
        v1.f=v1.f+dt*( 2.0*v0.fdy*nu.fdy
                       +nu.fdx*v0.fdx
                       +nu.fdx*u0.fdy)
        
        
    f=ml.diverge(mesh,u1.f,v1.f)
    f.f=f.f/dt

#   Solve the Pressure Correction Equation
#    p=sl.sor_gs(mesh,p.f[:mesh.nzx,:mesh.nzy],f,omega,tol,max_iter) 
    p=sl.sor_j(mesh,p.f[:mesh.nzx,:mesh.nzy],f,1.0,tol,max_iter) 
    p.setbc_neumann(mesh)
    p.calcgrads(mesh)
    
    um1.setf(u0.f)
    vm1.setf(v0.f)
        
    u0.f[:mesh.npx,:mesh.npy] = u1.f[:mesh.npx,:mesh.npy] - dt*p.fzdxp
    v0.f[:mesh.npx,:mesh.npy] = v1.f[:mesh.npx,:mesh.npy] - dt*p.fzdyp
     
     
#Apply these at the end for accounting reasons     
    u0.setbc(mesh,'top','extrap')
    u0.setbc(mesh,'bottom','extrap')
  #  u0.setbc(mesh,'bottom','reflect')
    u0.setbc(mesh,'right','extrap')
    u0.setbc(mesh,'left','dirichlet',inflow)

    v0.setbc(mesh,'top','extrap')
    v0.setbc(mesh,'bottom','extrap')
 #   v0.setbc(mesh,'bottom','dirichlet',0.0)
    v0.setbc(mesh,'right','extrap')
    v0.setbc(mesh,'left','dirichlet',inflowv)

    if k_epsilon:
        k.setbc(mesh,'top','extrap')
        k.setbc(mesh,'bottom','extrap')
        k.setbc(mesh,'right','extrap')
        k.setbc(mesh,'left','dirichlet',inflowk)
        
        eps.setbc(mesh,'top','extrap')
        eps.setbc(mesh,'bottom','extrap')
        eps.setbc(mesh,'right','extrap')
        eps.setbc(mesh,'left','dirichlet',infloweps)
    
    time=tnxt
    cyc=cyc+1
    if cyc%dtc==0:
        [l1u,l2u]=u0.calcerr(mesh,um1.f)
        [l1v,l2v]=v0.calcerr(mesh,vm1.f)
        print "Time: ",time,"DT: ",dt,"Cycle: ",cyc, "Delta U: ",sqrt(l2u**2+l2v**2)
        pl.plotxyz(mesh.px,mesh.py,u0.f[:mesh.npx,:mesh.npy],'u%05d'%cyc, "U_Plots")
        pl.plotxyz(mesh.px,mesh.py,v0.f[:mesh.npx,:mesh.npy],'v%05d'%cyc, "V_Plots")
        pl.plotxyz(mesh.zx,mesh.zy,p.f[:mesh.nzx,:mesh.nzy],'p%05d'%cyc, "P_Plots")
        if k_epsilon :
            pl.plotxyz(mesh.px,mesh.py,k.f[:mesh.npx,:mesh.npy],'k%05d'%cyc, "K_Plots")
            pl.plotxyz(mesh.px,mesh.py,eps.f[:mesh.npx,:mesh.npy],'eps%05d'%cyc, "Epsilon_Plots")
            pl.plotxyz(mesh.px,mesh.py,nu.f[:mesh.npx,:mesh.npy],'nu%05d'%cyc, "Nu_Plots")
        ml.write_plane(mesh,u0.f[:mesh.npx,:mesh.npy],'x',nzy/2,'x%05d'%cyc)
        ml.write_plane(mesh,u0.f[:mesh.npx,:mesh.npy],'y',nzx,'y%05d'%cyc)


# Calculate Outputs


pl.plotxyz(mesh.px,mesh.py,u0.f[:mesh.npx,:mesh.npy],'u_final', "U_Plots")
pl.plotxyz(mesh.px,mesh.py,v0.f[:mesh.npx,:mesh.npy],'v_final', "V_Plots")
pl.plotxyz(mesh.zx,mesh.zy,p.f[:mesh.nzx,:mesh.nzy],'p_final', "P_Plots")
